AWSTemplateFormatVersion: '2010-09-09'
Description: 'State: ElastiCache Redis Serverless - Minimum configuration'
Parameters:
  AwsRegion:
    Type: String
  Subnet1ID:
    Type: String
  Subnet2ID:
    Type: String
  VPCID:
    Type: String
  EmailAddress:
    Description: 'Email address to receive ElastiCache notifications'
    Type: String
  Env:
    Description: 'Environment name'
    Type: String
    AllowedValues: ['staging', 'production']
    Default: 'staging'

  AllowedIP:
    Description: 'IP address allowed to access Redis (CIDR format)'
    Type: String
    Default: '0.0.0.0/0'  # Default to all IPs, but should be restricted in production
  
  ApplicationSecurityGroup:
    Description: 'Security group ID of the application servers'
    Type: String
    Default: ''  # Optional, can be left empty

  RedisPassword:
    Description: 'Password for Redis authentication'
    Type: String
    NoEcho: true  # This hides the password in CloudFormation console
    Default: ''

Resources:
  RedisSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
        Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: "email"
        TopicName: !Sub "dash-${Env}-redis-topic"

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "dash-${Env}-redis-sg-v2"
      GroupDescription: Security group for DASH Redis
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        # Allow access from specific IP addresses
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Ref AllowedIP  # Parameter for your application's IP
          Description: "Application server access"
        
        # Allow access from other security groups (e.g., your application servers)
        # - IpProtocol: tcp
        #   FromPort: 6379
        #   ToPort: 6379
        #   SourceSecurityGroupId: !Ref ApplicationSecurityGroup
        #   Description: "Application security group access"


  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: !Sub "Subnet group for DASH Redis ${Env}"
      CacheSubnetGroupName: !Sub "dash-${Env}-redis-subnet-group-${AwsRegion}-v2"  # Changed from SubnetGroupName
      SubnetIds:
        - !Ref Subnet1ID
        - !Ref Subnet2ID

  RedisServerless:
    Type: AWS::ElastiCache::ServerlessCache
    Properties:
      ServerlessCacheName: !Sub "dash-${Env}-redis-v2"  # Changed from CacheName
      Description: !Sub "Serverless Redis for DASH ${Env}"
      Engine: redis
      CacheUsageLimits:
        DataStorage:
          Maximum: 5
          Unit: GB
        ECPUPerSecond:
          Maximum: 10000
      SecurityGroupIds:
        - !Ref RedisSecurityGroup
      SubnetIds:
        - !Ref Subnet1ID
        - !Ref Subnet2ID
#       UserGroupId: !Ref RedisUserGroup
#
#  RedisUserGroup:
#    Type: AWS::ElastiCache::UserGroup
#    Properties:
#      Engine: redis
#      UserGroupId: !Sub "dash-${Env}-redis-user-group"
#      UserIds:
#        - !Ref RedisUser
#
#  RedisUser:
#    Type: AWS::ElastiCache::User
#    Properties:
#      Engine: redis
#      UserId: !Sub "dash-${Env}-redis-user"
#      UserName: default
#      Authentication:
#        Type: password
#        PasswordCount: 1
#        Passwords:
#          - !Ref RedisPassword